import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";
import type { SignInDTO, SignUpDTO } from "../../api/types/auth/AuthDTO";
import { SignIn, SignUp } from "../../api/services/SignInOut";
import { getProfile } from "../../api/services/getProfile.ts";
import type { UserProfileDTO } from "../../api/types/auth/UserProfileDTO";
import type { ApiResponse } from "../../api/types/apiResponse";

interface AuthState {
  user: UserProfileDTO | null;
  accessToken: string | null;
  refreshToken: string | null;
  loading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

// üî• Kh√¥i ph·ª•c state t·ª´ localStorage khi kh·ªüi ƒë·ªông app
const getInitialState = (): AuthState => {
  try {
    const savedUser = localStorage.getItem("user");
    const savedAccessToken = localStorage.getItem("accessToken");
    const savedRefreshToken = localStorage.getItem("refreshToken");

    return {
      user: savedUser ? JSON.parse(savedUser) : null,
      accessToken: savedAccessToken,
      refreshToken: savedRefreshToken,
      loading: false,
      error: null,
      isAuthenticated: !!savedAccessToken,
    };
  } catch (error) {
    // N·∫øu localStorage b·ªã l·ªói, clear v√† return initial state
    localStorage.removeItem("user");
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    return {
      user: null,
      accessToken: null,
      refreshToken: null,
      loading: false,
      error: null,
      isAuthenticated: false,
    };
  }
};

const initialState: AuthState = getInitialState();

// üî• ƒêƒÉng nh·∫≠p v√† l·∫•y profile trong 1 thunk
export const signInThunk = createAsyncThunk(
  "auth/signIn",
  async (payload: SignInDTO, { rejectWithValue }) => {
    try {
      const loginResponse = await SignIn(payload);

      if (!loginResponse.isSuccess || !loginResponse.data) {
        return rejectWithValue(loginResponse.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");
      }

      const { accessToken, refreshToken } = loginResponse.data;

      localStorage.setItem("accessToken", accessToken);
      localStorage.setItem("refreshToken", refreshToken);

      const profileResponse = await getProfile();

      if (!profileResponse.isSuccess || !profileResponse.data) {
        return rejectWithValue("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
      }

      localStorage.setItem("user", JSON.stringify(profileResponse.data));

      return {
        accessToken: accessToken,
        refreshToken: refreshToken,
        user: profileResponse.data,
      };
    } catch (error: any) {
      return rejectWithValue(error.message || "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p");
    }
  }
);

// üî• C≈©ng fix SignUp n·∫øu c√≥ c√πng format
export const signUpThunk = createAsyncThunk(
  "auth/signUp",
  async (payload: SignUpDTO, { rejectWithValue }) => {
    try {
      const response = await SignUp(payload);

      if (!response.isSuccess || !response.data) {
        return rejectWithValue(response.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i");
      }

      // üî• Fix: D√πng lowercase
      const { accessToken, refreshToken } = response.data;

      // L∆∞u token v√†o localStorage
      localStorage.setItem("accessToken", accessToken);
      localStorage.setItem("refreshToken", refreshToken);

      return {
        accessToken: accessToken,
        refreshToken: refreshToken,
        message: response.message || "ƒêƒÉng k√Ω th√†nh c√¥ng",
      };
    } catch (error: any) {
      return rejectWithValue(error.message || "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω");
    }
  }
);

// üî• L·∫•y profile user (d√πng khi c·∫ßn refresh th√¥ng tin)
export const fetchProfileThunk = createAsyncThunk(
  "auth/fetchProfile",
  async (_, { rejectWithValue }) => {
    try {
      const response = await getProfile();

      if (!response.isSuccess || !response.data) {
        return rejectWithValue(
          response.message || "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i"
        );
      }

      // C·∫≠p nh·∫≠t user trong localStorage
      localStorage.setItem("user", JSON.stringify(response.data));

      return response.data;
    } catch (error: any) {
      return rejectWithValue(
        error.message || "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng"
      );
    }
  }
);

// üî• Logout (c√≥ th·ªÉ g·ªçi API logout n·∫øu c·∫ßn)
export const logoutThunk = createAsyncThunk(
  "auth/logout",
  async (_, { getState, rejectWithValue }) => {
    try {
      const state = getState() as { auth: AuthState };
      const refreshToken = state.auth.refreshToken;

      // N·∫øu c√≥ refreshToken, g·ªçi API logout ƒë·ªÉ revoke token
      if (refreshToken) {
        // Uncomment n·∫øu c√≥ API logout
        // await logoutApi({ refreshToken });
      }

      // Clear localStorage
      localStorage.removeItem("user");
      localStorage.removeItem("accessToken");
      localStorage.removeItem("refreshToken");

      return null;
    } catch (error: any) {
      // D√π c√≥ l·ªói c≈©ng v·∫´n logout local
      localStorage.removeItem("user");
      localStorage.removeItem("accessToken");
      localStorage.removeItem("refreshToken");
      return null;
    }
  }
);

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    // üî• Logout nhanh (kh√¥ng g·ªçi API)
    logout(state) {
      state.user = null;
      state.accessToken = null;
      state.refreshToken = null;
      state.error = null;
      state.isAuthenticated = false;
      state.loading = false;

      // Clear localStorage
      localStorage.removeItem("user");
      localStorage.removeItem("accessToken");
      localStorage.removeItem("refreshToken");
    },

    // üî• Clear error
    clearError(state) {
      state.error = null;
    },

    // üî• C·∫≠p nh·∫≠t user info
    updateUser(state, action: PayloadAction<Partial<UserProfileDTO>>) {
      if (state.user) {
        state.user = { ...state.user, ...action.payload };
        localStorage.setItem("user", JSON.stringify(state.user));
      }
    },

    // üî• Set loading state
    setLoading(state, action: PayloadAction<boolean>) {
      state.loading = action.payload;
    },

    // üî• Restore auth t·ª´ localStorage (g·ªçi khi app kh·ªüi ƒë·ªông)
    restoreAuth(state) {
      try {
        const savedUser = localStorage.getItem("user");
        const savedAccessToken = localStorage.getItem("accessToken");
        const savedRefreshToken = localStorage.getItem("refreshToken");

        if (savedAccessToken) {
          state.accessToken = savedAccessToken;
          state.refreshToken = savedRefreshToken;
          state.user = savedUser ? JSON.parse(savedUser) : null;
          state.isAuthenticated = true;
        }
      } catch (error) {
        // N·∫øu localStorage b·ªã l·ªói, logout
        state.user = null;
        state.accessToken = null;
        state.refreshToken = null;
        state.isAuthenticated = false;
      }
    },
  },
  extraReducers: (builder) => {
    builder
      // üî• SignIn
      .addCase(signInThunk.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(signInThunk.fulfilled, (state, action) => {
        state.loading = false;
        state.isAuthenticated = true;
        state.accessToken = action.payload.accessToken;
        state.refreshToken = action.payload.refreshToken;
        state.user = action.payload.user;
        state.error = null;
      })
      .addCase(signInThunk.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
        state.isAuthenticated = false;
        state.user = null;
        state.accessToken = null;
        state.refreshToken = null;
      })

      // üî• SignUp
      .addCase(signUpThunk.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(signUpThunk.fulfilled, (state, action) => {
        state.loading = false;
        state.isAuthenticated = true;
        state.accessToken = action.payload.accessToken;
        state.refreshToken = action.payload.refreshToken;
        state.error = null;
        // Ch∆∞a c√≥ user info, s·∫Ω fetch sau
      })
      .addCase(signUpThunk.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
        state.isAuthenticated = false;
      })

      // üî• FetchProfile
      .addCase(fetchProfileThunk.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchProfileThunk.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
        state.error = null;
      })
      .addCase(fetchProfileThunk.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      })

      // üî• Logout
      .addCase(logoutThunk.pending, (state) => {
        state.loading = true;
      })
      .addCase(logoutThunk.fulfilled, (state) => {
        state.user = null;
        state.accessToken = null;
        state.refreshToken = null;
        state.error = null;
        state.isAuthenticated = false;
        state.loading = false;
      })
      .addCase(logoutThunk.rejected, (state) => {
        // D√π c√≥ l·ªói c≈©ng v·∫´n logout
        state.user = null;
        state.accessToken = null;
        state.refreshToken = null;
        state.error = null;
        state.isAuthenticated = false;
        state.loading = false;
      });
  },
});

export const { logout, clearError, updateUser, setLoading, restoreAuth } =
  authSlice.actions;
export default authSlice.reducer;
