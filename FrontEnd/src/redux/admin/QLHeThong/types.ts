import type {
  NhanVienTaiKhoanDTO,
  KhachHangTaiKhoanDTO,
  AdminAccountDTO,
} from "../../../api/types/admins/QLHeThongtypes";

// ðŸŽ¯ Generic Data State Interface
export interface DataState<T> {
  data: T[];
  loading: boolean;
  error: string | null;
  total: number;
}

// ðŸŽ¯ UI State Interface
export interface UIState {
  activeTab: "nhan-vien" | "khach-hang" | "quan-ly";
  searchQuery: string;
  filters: {
    loaiTaiKhoan: string;
    trangThai: string; // khÃ´ng optional
  };
}

// ðŸŽ¯ Redux State Interface - sá»­ dá»¥ng generic DataState
export interface QLHeThongState {
  nhanVien: DataState<NhanVienTaiKhoanDTO>;
  khachHang: DataState<KhachHangTaiKhoanDTO>;
  adminAccount: DataState<AdminAccountDTO>;
  loaiTaiKhoan: {
    data: string[];
    loading: boolean;
    error: string | null;
  };
  ui: UIState;
}

// ðŸŽ¯ Initial State - Ä‘á»“ng nháº¥t táº¥t cáº£
export const qlHeThongInitialState: QLHeThongState = {
  nhanVien: {
    data: [],
    loading: false,
    error: null,
    total: 0,
  },
  khachHang: {
    data: [],
    loading: false,
    error: null,
    total: 0,
  },
  adminAccount: {
    data: [],
    loading: false,
    error: null,
    total: 0,
  },
  loaiTaiKhoan: {
    data: [],
    loading: false,
    error: null,
  },
  ui: {
    activeTab: "nhan-vien",
    searchQuery: "",
    filters: {
      loaiTaiKhoan: "", // Ä‘á»“ng nháº¥t: dÃ¹ng "" thay vÃ¬ "All"
      trangThai: "", // Ä‘á»“ng nháº¥t: luÃ´n cÃ³ giÃ¡ trá»‹
    },
  },
};
