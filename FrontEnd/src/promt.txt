Prompt chuẩn yêu cầu tính năng (Frontend + Redux Domain)

Tôi muốn thêm/chỉnh sửa tính năng cho module [Tên domain, ví dụ: qlPhong].

1. Mô tả tổng quan
[Ngắn gọn: mục tiêu nghiệp vụ, user role nào dùng]

2. Phạm vi
- Slice mới hay bổ sung slice cũ? (nếu mới: tên slice)
- Có cần tích hợp vào domain combine (state.[domain].[slice])? YES/NO
- Các view / component cần tạo / sửa

3. Types / DTO
- Backend DTO đã có hay cần mới? Liệt kê:
  interface TenDTO { ... }
  interface AddTenDTO { ... }
  interface UpdateTenDTO { ... }
- Nếu đã có trong api/types => ghi "tái sử dụng"

4. API Spec
BASE: /api/[Controller]
Endpoints:
- GET /[endpoint] (mô tả, params)
- GET /[endpoint]/{id}
- POST /[endpoint] (body AddDTO)
- PUT /[endpoint] (body UpdateDTO)
- DELETE /[endpoint]/{id} (nếu có)
Yêu cầu hàm call API chuẩn:
export const apiFunc = async (payload?: Type): Promise<ApiResponse<ReturnType>> => {
  try {
    const res = await axiosInstance.[method](`${BASE}/...`, payload);
    return res.data as ApiResponse<ReturnType>;
  } catch (e:any) {
    throw new Error(e.response?.data?.message || "Có lỗi xảy ra khi [mô tả]");
  }
};

5. Redux (5 file pattern)
Tạo / Cập nhật:
- thunks.ts (createAsyncThunk, rejectWithValue chuẩn, check res.isSuccess)
- reducers.ts (pure UI/data reducers)
- extraReducers.ts (handle pending/fulfilled/rejected)
- slice.ts (createSlice kết hợp reducers + extraReducers)
- selectors.ts (trả về state.[domain].[slice].field)
Bổ sung vào:
- types.ts (InitialState + DomainState)
- index.ts (combineReducers domain + export)

State chuẩn slice:
{
  data: T[];
  loading: boolean;
  error: string | null;
  total: number;
  ui: { searchQuery: string; ...modal flags...; selected: T | null; ...filters }
}

6. Hooks
- Tạo use[Slice] với:
  data, loading, error, ui
  refresh() -> dispatch fetchAll
  add()/update()/remove() trả { success:boolean, data? }
  openAdd/closeAdd, openEdit/closeEdit, setSearchQuery, clearFilters
  Auto refresh: nếu options.autoLoad = true
- Tạo use[Domain] gom các hook slice: { sliceA, sliceB, refreshAll }

7. Component
- Management component:
  useDomain().sliceX
  Lọc client bằng ui.searchQuery
  Table truyền props:
    data, loading, onUpdate(row), onDelete(row?) => promise { success }
- Modals:
  Title template gradient + icon:
    <div className="text-center py-2">...</div>
  Form layout="vertical"
  Đơn vị hiển thị rõ (VD: addonAfter="người")
  Sau onFinish: gọi add/update -> nếu success đóng modal (không reload thủ công vì hook đã refresh)

8. UI/UX đặc biệt
- Nêu rõ: màu badge, icon set, pagination có không, export CSV/Excel
- Nêu rõ cần Alert hướng dẫn trong modal? (Yes/No)

9. Logic bổ sung
- Validation phía client (range > 0, unique?)
- Phân trang server hay client?
- Tự động refresh sau add/update/delete: YES

10. Output mong muốn
- Liệt kê chính xác các file cần thêm/sửa (đường dẫn)
- Code patch đầy đủ (dùng // filepath comment)
- Ngắn gọn, không giải thích thừa

Ví dụ nhanh:
Module: qlPhong - thêm CRUD Loại Phòng
...
(Điền theo các mục trên)

Khi trả lời: hãy tạo đầy đủ code các file mới + chỉnh sửa cần thiết theo cấu trúc sẵn.

(Optional) Gợi ý: Sau khi add/update ở UI nếu muốn tránh flash loading có thể optimistic update: cập nhật state ngay trước refresh; hiện đã insert/update trong extraReducers nên flash nhẹ vẫn acceptable.
