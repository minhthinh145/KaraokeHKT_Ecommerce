import type { UserProfileDTO } from "../api/types/auth/UserProfileDTO";
import { ApplicationRole } from "../api/types/admins/QLHeThongtypes";
import type { SignInDTO } from "../api";

// üî• S·ª¨A: UserRole type
export type UserRole = keyof typeof ApplicationRole;

// üî• EXPORT UserRole ƒë·ªÉ d√πng ·ªü n∆°i kh√°c

// üî• Auth state types - DUY NH·∫§T ·ªü ƒë√¢y
export interface AuthState {
  isAuthenticated: boolean;
  accessToken: string | null;
  refreshToken: string | null;
  user: AuthUser | null;
  loading: boolean;
  error: string | null;
}

// AuthUser ch·ªâ n√™n ch·ª©a loaiTaiKhoan v√† √°nh x·∫° UserProfileDTO (n·∫øu c√≥)
export interface AuthUser {
  loaiTaiKhoan: UserRole; // lu√¥n c√≥ t·ª´ login
  profile?: UserProfileDTO; // s·∫Ω ƒë∆∞·ª£c g√°n sau khi g·ªçi getProfile
  profileLoaded?: boolean; // flag ƒë√£ load profile
}

// Login response t·ª´ backend (ch·ªâ 3 tr∆∞·ªùng)
export interface LoginResponse {
  loaiTaiKhoan: UserRole;
  accessToken: string;
  refreshToken: string;
}

// Login request

// Auth action payloads
export interface LoginSuccessPayload {
  accessToken: string;
  refreshToken: string;
  loaiTaiKhoan: UserRole;
}

export interface ProfileLoadedPayload extends UserProfileDTO {
  // Profile data t·ª´ API getProfile
}

// Auth thunk responses
export interface LoginThunkResponse extends LoginSuccessPayload {
  // Response t·ª´ login thunk
}

export interface ProfileThunkResponse extends UserProfileDTO {
  // Response t·ª´ profile thunk
}

// Local storage keys
export const AUTH_STORAGE_KEYS = {
  ACCESS_TOKEN: "accessToken",
  REFRESH_TOKEN: "refreshToken",
  USER_ROLE: "userRole",
  USER_DATA: "userData",
} as const;

// Auth error types
export type AuthErrorType =
  | "INVALID_CREDENTIALS"
  | "TOKEN_EXPIRED"
  | "NETWORK_ERROR"
  | "PROFILE_LOAD_FAILED"
  | "UNKNOWN_ERROR";

export interface AuthError {
  type: AuthErrorType;
  message: string;
  details?: any;
}

// Route protection types
export interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: UserRole;
  fallbackRoute?: string;
}

export interface RoleBasedRouteProps {
  children: React.ReactNode;
  allowedRoles: string[]; // üî• S·ª¨A: t·ª´ UserRole[] th√†nh string[]
  fallbackRoute?: string;
}

// Auth context/hook return type
export interface UseAuthReturn extends Omit<AuthState, "user"> {
  user: AuthUser | null;
  userRole: UserRole | null;
  defaultRoute: string;

  // Actions
  login: (credentials: SignInDTO) => Promise<any>;
  logout: () => void;
  loadProfile: () => Promise<UserProfileDTO>;
  clearError: () => void;

  // Role checks
  hasRole: (role: UserRole) => boolean;
  isInRoleGroup: (
    group: keyof typeof import("../constants/auth").ROLE_GROUPS
  ) => boolean;
  canAccessRoute: (route: string) => boolean;

  // Specific role checks
  isQuanTriHeThong: () => boolean;
  isQuanLy: () => boolean;
  isNhanVien: () => boolean;
  isAdmin: () => boolean;

  // üî• TH√äM: Navigation helpers
  navigateToDefaultRoute: () => void;
  navigateToRole: (role: UserRole) => void;

  // üî• TH√äM: Profile helpers
  hasProfile: boolean;
  profileLoaded: boolean;

  // üî• TH√äM: User info shortcuts
  userName: string;
  userEmail: string;
  userPhone: string;
}

// Redux selectors return types
export interface AuthSelectors {
  auth: AuthState;
  user: AuthUser | null;
  userRole: UserRole | null;
  isAuthenticated: boolean;
  defaultRoute: string;
  loading: boolean;
  error: string | null;
}
